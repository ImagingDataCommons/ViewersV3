version: 2.1
## Force for config
commands:
  deployment_setup:
    steps:
      - run:
          name: 'Set the Tier'
          command: |
            TIER=DEV
            if [[ ${CIRCLE_BRANCH} =~ idc-v3-viewer-(prod|test).* ]]; then
              TIER=$(awk -F- '{print toupper($4)}' \<<< ${CIRCLE_BRANCH})
            fi
            echo "export TIER=${TIER}" >> $BASH_ENV
            echo "Tier was identified as ${TIER} for branch ${CIRCLE_BRANCH}"
      - run:
          name: 'Assign Project-level vars'
          command: |
            if [ ! -f deployment.key.json ]; then
              echo "Deployment JSON keyfile not found - loading from CircleCI."
              KEY=${DEPLOYMENT_KEY_IDC_DEV}
            else
              echo "Deployment JSON keyfile found."
              KEY="NA"
            fi
            CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_IDC_DEV}
            PROJECT_ID=${DEPLOYMENT_PROJECT_ID_IDC_DEV}
            BUCKET=${DEPLOYMENT_BUCKET_IDC_DEV}
            if [[ ${TIER} == "PROD" ]]; then
              KEY=${DEPLOYMENT_KEY_IDC_PROD}
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_IDC_PROD}
              PROJECT_ID=${DEPLOYMENT_PROJECT_ID_IDC_PROD}
              BUCKET=${DEPLOYMENT_BUCKET_IDC_PROD}
              echo "Using production project and related deployment SA and bucket."
            elif [[ ${TIER} == "TEST" ]]; then
              KEY=${DEPLOYMENT_KEY_IDC_TEST}
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_IDC_TEST}
              PROJECT_ID=${DEPLOYMENT_PROJECT_ID_IDC_TEST}
              BUCKET=${DEPLOYMENT_BUCKET_IDC_TEST}
              echo "Using test project and related deployment SA and bucket."
            elif [[ ${TIER} == "DEV" ]]; then
              echo "Using development/default project and related deployment SA and bucket."
            else
              echo "[ERROR] - Unrecognized tier: ${TIER} - exiting."
              exit 1
            fi
            echo "export DEPLOYMENT_KEY=\"${KEY}\"" >> $BASH_ENV
            echo "export DEPLOYMENT_CLIENT_EMAIL=${CLIENT_EMAIL}" >> $BASH_ENV
            echo "export DEPLOYMENT_PROJECT_ID=${PROJECT_ID}" >> $BASH_ENV
            echo "export DEPLOYMENT_BUCKET=${BUCKET}" >> $BASH_ENV

            echo "Project settings assigned:"
            echo "Deployment client: ${CLIENT_EMAIL}"
            echo "Deployment project: ${PROJECT_ID}"
            echo "Deployment bucket: gs://${BUCKET}"

  ## https://github.com/cypress-io/circleci-orb
  ##
  #orbs:
  #  codecov: codecov/codecov@1.0.5
  #  cypress: cypress-io/cypress@3.3.1

  deployment_config:
    steps:
      - run:
          name: 'Set tier-specific configuration file'
          command: |
            sudo -E /bin/bash ./idc-deploy-shell/pull_config.sh
            xargs -a viewer3_deployment_config.txt -I{} echo "export {}" >> $BASH_ENV

  auth:
    steps:
      - run:
          name: 'Service Account Auth and Project Settings'
          command: |
            sudo -E /bin/bash ./idc-deploy-shell/gcloud_authenticate.sh

  install_cloud_sdk:
    steps:
      - run:
          name: 'Install CloudSDK'
          command: |
            echo "export CLOUDSDK_CORE_DISABLE_PROMPTS=1" >> $BASH_ENV
            sudo apt-get install ca-certificates
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update -qq
            sudo apt-get -y install google-cloud-sdk

jobs:
  build_job:
    environment:
      TZ: '/usr/share/zoneinfo/America/Los_Angeles'
    working_directory: ~/ViewersV3
    docker:
      - image: cimg/python:3.8
    resource_class: large
    steps:
      - checkout
      - install_cloud_sdk
      - deployment_setup
      - auth
      - deployment_config
      - run:
          name: Install Dependencies
          command: |
            sudo -E /bin/bash ./idc-deploy-shell/install-deps.sh
      - run:
          name: Copy in IDC favicons
          command: |
            ls -lasR ~/ViewersV3
            cp ~/ViewersV3/idc-assets/favicon-nci.ico ~/ViewersV3/platform/app/public/assets/favicon.ico
            cp ~/ViewersV3/idc-assets/favicon-nci-16x16.png ~/ViewersV3/platform/app/public/assets/favicon-16x16.png
            cp ~/ViewersV3/idc-assets/favicon-nci-32x32.png ~/ViewersV3/platform/app/public/assets/favicon-32x32.png
      - run:
          name: Build Viewer
          command: |
            # Send output while viewer is building....
            chmod u+x ./idc-deploy-shell/pingJob.sh ./idc-deploy-shell/killPing.sh
            ./idc-deploy-shell/pingJob.sh &
            /bin/bash ./idc-deploy-shell/buildViewer.sh
            ./idc-deploy-shell/killPing.sh

      - save_cache:
          key: idc-viewerV3-{{ epoch }}
          paths:
            - ./platform/app/dist
            - ./idc-deploy-shell
            - ./idc-assets

  deploy_job:
    environment:
      TZ: '/usr/share/zoneinfo/America/Los_Angeles'
    docker:
      - image: cimg/python:3.8
    working_directory: ~/ViewersV3
    steps:
      - restore_cache:
          keys:
            - idc-viewerV3-
      - install_cloud_sdk
      - deployment_setup
      - auth
      - deployment_config
      - run:
          name: Customize Config
          command: |
            /bin/bash ./idc-deploy-shell/prepare_config.sh > platform/app/dist/app-config.js
            cp ~/ViewersV3/idc-assets/IDC-Logo-WHITE.svg platform/app/dist/IDC-Logo-WHITE.svg
      - run:
          name: Copy to cloud
          command: |
            /bin/bash ./idc-deploy-shell/cloudCopy.sh

  # This is copied from the Cypress orb since the default for cypress/run is node 16 and
  # we migrated to 18
  CYPRESS_CUSTOM_RUN:
    description: |
      A single, complete job to run Cypress end-to-end tests in your application.
    executor: cypress-custom
    parallelism: << parameters.parallelism >>
    parameters:
      cypress-cache-key:
        default: cypress-cache-{{ arch }}-{{ checksum "package.json" }}
        description: Cache key used to cache the Cypress binary.
        type: string
      cypress-cache-path:
        default: ~/.cache/Cypress
        description: |
          By default, this will cache the '~/.cache/Cypress' directory so that the Cypress binary is cached. You can override this by providing your own cache path.
        type: string
      cypress-command:
        default: npx cypress run
        description: Command used to run your Cypress tests
        type: string
      include-branch-in-node-cache-key:
        default: false
        description: |
          If true, this cache will only apply to runs within the same branch. (Adds -{{ .Branch }}- to the node cache key)
        type: boolean
      install-browsers:
        default: false
        description: |
          Cypress runs by default in the Electron browser. Use this flag to install additional browsers to run your tests in.
          This is only needed if you are passing the `--browser` flag in your `cypress-command`.
          This parameter leverages the `circleci/browser-tools` orb and includes Chrome and FireFox.
          If you need additional browser support you can set this to false and use an executor with a docker image
          that includes the browsers of your choosing. See https://hub.docker.com/r/cypress/browsers/tags
        type: boolean
      install-command:
        default: ''
        description: Overrides the default NPM command (npm ci)
        type: string
      node-cache-version:
        default: v1
        description:
          Change the default node cache version if you need to clear the cache for any reason.
        type: string
      package-manager:
        default: npm
        description: Select the default node package manager to use. NPM v5+ Required.
        enum:
          - npm
          - yarn
          - yarn-berry
        type: enum
      parallelism:
        default: 1
        description: |
          Number of Circle machines to use for load balancing, min 1
          (requires `parallel` and `record` flags in your `cypress-command`)
        type: integer
      post-install:
        default: ''
        description: |
          Additional commands to run after running install but before verifying Cypress and saving cache.
        type: string
      start-command:
        default: ''
        description: Command used to start your local dev server for Cypress to tests against
        type: string
      working-directory:
        default: ''
        description: Directory containing package.json
        type: string
    resource_class: large
    steps:
      - cypress/install:
          cypress-cache-key: << parameters.cypress-cache-key >>
          cypress-cache-path: << parameters.cypress-cache-path >>
          include-branch-in-node-cache-key: << parameters.include-branch-in-node-cache-key >>
          install-browsers: << parameters.install-browsers >>
          install-command: << parameters.install-command >>
          node-cache-version: << parameters.node-cache-version >>
          package-manager: << parameters.package-manager >>
          post-install: << parameters.post-install >>
          working-directory: << parameters.working-directory >>
      - cypress/run-tests:
          cypress-command: << parameters.cypress-command >>
          start-command: << parameters.start-command >>
          working-directory: << parameters.working-directory >>

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_job:
          filters:
            branches:
              only:
                - master
                - idc-v3-viewer-prod
                - idc-v3-viewer-test
      - deploy_job:
          requires:
            - build_job
          filters:
            branches:
              only:
                - master
                - idc-v3-viewer-prod
                - idc-v3-viewer-test
